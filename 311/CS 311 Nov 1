CS 311 Notes @ 11/1/2012

Context Free Grammar Exercises:

	1. S -> aSc | X
	   X -> aXb | Y
	   Y -> aY  | a

	   more a's than b's and c's combined, therfore, 1 a per a or b, then at least 1 or more a's

	2. #a != #b or #b != #c

		Q -> SC           (introduce higher level to avoid symbls out of order, so C after recurisve S)
		S -> aSb | aA | bB          
		A -> aA | empty 
		B -> bB | empty 
		C -> cC | empty

		(this only takes care of i != j)
		---------------
		ANSWER:	
		S -> XC | AY
		X -> aXb | aA | bB  (generate same a & b, then either 1 more a or 1 more b)
		A -> aA | empty
		B -> bB | empty
		C -> cC | empty
		Y -> bYc | bB | cC  (generate same b & c, then either 1 more b or 1 more c)

	3. same as 2 except i,j,k > 0 , need 3 blocks of symbosl A, B and C, at least 1 of each letter && satisfy the i!=j or j!=k

		S -> T | U
		T -> AXC | XBC
		U -> ABY | AYC
		A -> aA | a (1 or more)
		B -> bB | b
		C -> cC | c
		X -> aXb | ab 
		Y -> bYc | bc

	4. All palindroms of {a,b}*

		S-> aSa | bSb | T
		T-> a | b | empty

	5. odd length strings
		S -> aT | bT 
		T -> TaTaT | TaTbT | TbTbT| TbTaT | empty

	how about even?
		just T 

	6. u s v w, where |v| = |u| + |w| , and s & t must be 0 or 1, but opposite

	S -> XY | YX
	X -> 0X0 | 0X1 | 1X0 | 1X1 | 0
	Y -> 0Y0 | 0Y1 | 1Y0 | 1Y1 | 1

	7. 3 times a's = 2 times b's 

		shortest string: empty string
						 aabbb , bbbaa, babab, ababb 

						 combination of set 2, out of 5, = 10 possible

		S -> empty | aabbb | ababb | abbab | abbba | baabb | babab | etc , add S between all of them 

	-------------------------------------


RIGHT-LINEAR GRAMMAR:

	A grammar G = (N, Sigma, P, S) is right-linear if every production has the form
	A -> xB or A -> x, 
		where A,B \element N (single non terminal)
		, and x \element Sigma*  (string becasue of * kelene closure)

		No non-terminal, or 1 non-terminal,
		but if non-terminal exists, must be right most

		 A
		/ \
	   x1  B1
	       /\
          x2 B2
              \
              xn (terminate on right)

      EXAMPLE: Give a right-linear grammar for all strings begin with 101
      	S-> 101A
      	A-> 0A1 | 1A0 | empty 

      	terminal string followed by non-terminal 

      EXAMPLE: same as above but END with 101
      	S-> 0S | 1S | 101 

      EXAMPLE: all strings containing 101
      	S-> 0S | 1S | 101A
      	A-> 0A | 1A | empty

      	how about:
      		S-> A101A
      		A-> 0A|1A|empty

      		Nope, it's a CFG but not right-linear

    EXAMPLE: RLG for all signed/unsigned integers without leading 0s

    	S-> +T | -T| T
    	T-> 1..9B | 0 
    	B-> 0...9B | empty 

DEF: The language generated by RLG is called a Right Linear Language

DEF: cfg generates context free language

grammar generates corresponding language,
later we will show Right Linear Language  = Regular Language

HOMEWORK 3 ON BLACKBOARD, SHOULD BE ABLE TO DO 1 & 2 




